=========================================parte-14====================================
Já falamos antes da Conversão de Tipos. Fazemos conversões quando precisamos 
pegar um valor e trabalhar como se ele fosse de outro tipo.Um exemplo é quando 
pedimos uma data para o usuário. Receberemos uma String, como: "01/01/2000". 
E se quisermos calcular quantos dias existem entre essa data e "15/03/2020"? 
Cálculos só podem ser feitos com números. Temos então que pegar os dias, meses e 
anos da String e converter cada um deles para Number.Quando misturamos tipos 
diferentes em operações, como somar a string "5" com o número 3, linguagens de 
programação como Java, C#, Ruby e Python normalmente exibem um erro. 
Quando isso ocorre dizemos que essa linguagem é "Fortemente Tipada", ou que é uma 
linguagem de "Tipagem Forte".
O JavaScript tenta fazer uma conversão automática para tentar fazer a operação. 
Isso pode deixar a linguagem mais dinâmica, mas ao mesmo tempo pode fazer com que 
comportamentos inesperados ocorram. O PHP também possui esse comportamento, e 
chamamos de "Tipagem Fraca".Não pense nas palavras "Fraca" e "Forte" em seu 
significado literal. "Forte" não significa necessariamente melhor do que 
"Fraca". Muitas pessoas criticam as linguagens de tipagem fraca, mas esse 
comportamento dá mais flexibilidade na hora de criarmos soluções com nossos 
códigos, melhora a velocidade de desenvolvimento e facilita o aprendizado de 
desenvolvedores iniciantes.
A desvantagem é que, pela maior liberdade, pessoas com pouco conhecimento podem 
acabar criando códigos com comportamentos inconsistentes, passíveis de vários 
erros. Por não ter certeza de um tipo de variável, pode ser mais difícil de 
entender algum código.
------------------------------------------------------------------------------------
		DICA:
			Cada característica sempre vai possuir vantagens e 
desvantagens. Se alguém te disser que apenas X presta, provavelmente essa pessoa 
não possui conhecimento o suficiente de Y e Z.
------------------------------------------------------------------------------------
====================================cuidados========================================
Quando usamos o operador "-" com um número e uma string, a string será convertida 
para número e uma subtração será feita.
		5 - "3" // -> 2
	

Vimos anteriormente que o operador "+" 
serve tanto para soma quanto para concatenação de Strings.Quando usamos o "+" com 
um número e uma string, o número é convertido para string e é feita uma 
concatenação.
		5 + "3" // -> "53"


Isso significa que qualquer valor que usarmos com "+" e uma String 
serão convertidos para String.

		5 + "" // -> "5"

Porém, se usarmos o "+" com uma string sozinha, o 
JavaScript irá tentar converter essa string para um número 
		+"3" // -> 3
+"abc" // -> NaN
5 + +"3" // -> 8



Se somarmos dois 
Arrays, eles serão transformados em Strings e serão concatenados também.

		[1,2] + [3,4] // -> "1,23,4"


Muitas 
outras conversões podem ocorrer automaticamente. Uma comparação curiosa é a 
seguinte:


		3 == [3] // -> true

Lembre-se que a comparação com "==", diferente da "===", não leva em conta o 
tipo do valor. Antes de comparar, o Array acaba expondo o valor do número que 
está em seu interior, resultando em uma comparação "3 == 3", que acaba retornando 
true.

Isso também ocorre com outros tipos de valores:


		"Treinaweb" == ["Treinaweb"] // -> true

=============================Conversão de tipo=======================================
Para evitar problemas e comportamentos inesperados, prefira não deixar que o 
JavaScript converter os valores automaticamente.Converta os tipos explicitamente.
Para isso, temos funções que fazem a conversão.

Convertendo Valores para String

Para converter valores para Strings, passe o valor para a função String().
	String(123) // -> "123"
String(true) // -> "true"

Esses valores também possuem o método "toString()", que faz o mesmo. 
Seu uso é mais comum, já que o nome deixa mais explícito que está sendo 
feita uma conversão.
		(123).toString() // -> "123"
true.toString() // -> "true"

-----------------------------------Dica--------------------------------------------
Prefira estes métodos ao invés de usar + para fazer uma conversão para String.
------------------------------------------------------------------------------------


Convertendo Valores para Number

Assim como a função String(), também temos a função Number().

	Number("3") // -> 3
	
Number("3.14") // -> 3.14
	
Number("abc") // -> NaN

	Number(false) // -> 0

	Number(true) // -> 1

Também temos as funções parseInt(), que transforma uma String para um número 
inteiro, e parseFloat(), que transforma uma String para um número com casas 
decimais.
		parseInt("3") // -> 3

		parseInt("3.14") // -> 3
		
parseInt("abc") // -> NaN
		parseFloat("3") // -> 3

		parseFloat("3.14") // -> 3.14
		
parseFloat("abc") // -> NaN

----------------------------------Dica----------------------------------------------
-Prefira estes métodos ao invés de usar + para fazer uma conversão para Number.
-----------------------------------------------------------------------------------
A conversão entre String e Number é a mais comum, mas também temos outras 
como Boolean(), Array(), Function(), RegExp(), Date(), Error() e Symbol().
====================================================================================









